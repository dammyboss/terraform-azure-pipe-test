# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: ubuntu-latest

variables:
  backendrg: bicep
  backendstorage: damiteststorage
  backendcontainer: damicontainertf
  backendstoragekey: teraform.tfstate

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          
          - task: TerraformTaskV3@3
            inputs:
              provider: 'azurerm'
              command: 'init'
              backendServiceArm: 'tf-azure-pipeline-test'
              backendAzureRmResourceGroupName: '$(backendrg)'
              backendAzureRmStorageAccountName: '$(backendstorage)'
              backendAzureRmContainerName: '$(backendcontainer)'
              backendAzureRmKey: '$(backendstoragekey)'
          
          - task: TerraformTaskV3@3
            displayName: validate
            inputs:
              provider: 'azurerm'
              command: 'validate'

  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          
          - task: TerraformTaskV3@3
            inputs:
              provider: 'azurerm'
              command: 'Init'
              backendServiceArm: 'tf-azure-pipeline-test'
              backendAzureRmResourceGroupName: '$(backendrg)'
              backendAzureRmStorageAccountName: '$(backendstorage)'
              backendAzureRmContainerName: '$(backendcontainer)'
              backendAzureRmKey: '$(backendstoragekey)'
          
          # - task: TerraformTaskV3@3
          #   displayName: Plan
          #   inputs:
          #     provider: 'azurerm'
          #     command: 'plan'
          #     environmentServiceNameAzureRM: 'tf-azure-pipeline-test'
          
          - task: TerraformCLI@0
            inputs:
              command: 'plan'
              environmentServiceName: 'tf-azure-pipeline-test'
              commandOptions: '-out=terraform.tfplan'
              allowTelemetryCollection: false
            
          - task: TerraformTaskV3@3
            displayName: Apply
            inputs:
              provider: 'azurerm'
              command: 'apply'
              environmentServiceNameAzureRM: 'tf-azure-pipeline-test'